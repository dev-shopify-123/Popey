{"version":3,"sources":["webpack:///./node_modules/pxs-map/dist/index.es.js"],"names":[],"mappings":";;;;;;;;;;;;AACA;AACA;AACA;AACA;;AAEuB;AACQ;;AAE/B;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;AACA;AACA,6CAA6C,gBAAgB;;AAE7D;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,uBAAuB;AACxC;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6CAAC;AAClB;AACA,8CAA8C,IAAI,mBAAmB,IAAI,mBAAmB,IAAI,4CAA4C,IAAI,mBAAmB,IAAI,mBAAmB,IAAI;AAC9L;AACA,uCAAuC,IAAI,mBAAmB,IAAI,4CAA4C,IAAI,mBAAmB,IAAI;AACzI;AACA,sCAAsC,IAAI,qDAAqD,IAAI;AACnG;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA,sBAAsB,mBAAmB;AACzC;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,WAAW,qCAAqC,kBAAkB,GAAG,GAAG,wCAAwC,oBAAoB,GAAG,GAAG,6CAA6C,kBAAkB,GAAG,GAAG,+CAA+C,kBAAkB,GAAG,GAAG,oEAAoE,oBAAoB,GAAG,GAAG,mDAAmD,oBAAoB,GAAG,GAAG,uDAAuD,oBAAoB,GAAG,GAAG,wDAAwD,oBAAoB,GAAG,GAAG,oDAAoD,oBAAoB,GAAG,GAAG,gCAAgC,oBAAoB,GAAG,GAAG,+DAA+D,kBAAkB,GAAG,GAAG,6DAA6D,oBAAoB,GAAG,GAAG,mEAAmE,kBAAkB,GAAG,GAAG,kEAAkE,kBAAkB,GAAG,GAAG,2DAA2D,oBAAoB,GAAG,GAAG,wEAAwE,kBAAkB,GAAG,GAAG,0EAA0E,kBAAkB,GAAG,GAAG,oCAAoC,oBAAoB,GAAG,GAAG,2DAA2D,kBAAkB,GAAG;AACp/C;;AAEA;AACA,iBAAiB,6CAAC;AAClB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM,+CAAO;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;;AAEe,qEAAM,EAAC","file":"PXSMap.bundle.js","sourcesContent":["\n/*!\n * pxs-map v2.0.3\n * (c) 2018 undefined\n */\n\nimport $ from 'jquery';\nimport $script from 'scriptjs';\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\n/*\n * Function to convert any given latitude and longitude format to decimal degrees\n */\nfunction getDecimalDegrees() {\n  var firstComponent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var secondComponent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var thirdComponent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var fourthComponent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  var directions = {\n    N: 1,\n    E: 1,\n    S: -1,\n    W: -1\n  };\n  var decimalDegrees = 0.0;\n  var components = [firstComponent, secondComponent, thirdComponent, fourthComponent];\n\n  for (var i = 0; i < components.length; i++) {\n    var component = components[i];\n\n    if (component) {\n      if (Number.isNaN(parseFloat(component))) {\n        decimalDegrees *= directions[component];\n      } else {\n        decimalDegrees += parseFloat(component) / Math.pow(60, i);\n      }\n    }\n  }\n\n  return decimalDegrees;\n}\n\n/*\n * By providing the ability to use a place name, or latitude and longitude coordinates\n * we give merchants, and our demo stores the option to bypass the Geocoding API.\n * The Geocoding API (https://developers.google.com/maps/documentation/geocoding/usage-and-billing) allows us\n * to take a place name and convert it to latitude and longitude expressed in decimal degrees.\n */\nfunction getLatitudeLongitude(address) {\n  var deferred = $.Deferred();\n  // Degrees, Minutes and Seconds: DDD° MM' SS.S\"\n  var latLongDegreesMinutesSeconds = /^([0-9]{1,3})(?:°[ ]?| )([0-9]{1,2})(?:'[ ]?| )([0-9]{1,2}(?:\\.[0-9]+)?)(?:\"[ ]?| )?(N|E|S|W) ?([0-9]{1,3})(?:°[ ]?| )([0-9]{1,2})(?:'[ ]?| )([0-9]{1,2}(?:\\.[0-9]+)?)(?:\"[ ]?| )?(N|E|S|W)$/g;\n  // Degrees and Decimal Minutes: DDD° MM.MMM'\n  var latLongDegreesMinutes = /^([0-9]{1,3})(?:°[ ]?| )([0-9]{1,2}(?:\\.[0-9]+)?)(?:'[ ]?| )?(N|E|S|W) ?([0-9]{1,3})(?:°[ ]?| )([0-9]{1,2}(?:\\.[0-9]+)?)(?:'[ ]?| )?(N|E|S|W)$/g;\n  // Decimal Degrees: DDD.DDDDD°\n  var latLongDegrees = /^([-|+]?[0-9]{1,3}(?:\\.[0-9]+)?)(?:°[ ]?| )?(N|E|S|W)?,? ?([-|+]?[0-9]{1,3}(?:\\.[0-9]+)?)(?:°[ ]?| )?(N|E|S|W)?$/g;\n  var latLongFormats = [latLongDegreesMinutesSeconds, latLongDegreesMinutes, latLongDegrees];\n  var latLongMatches = latLongFormats.map(function (latLongFormat) {\n    return address.match(latLongFormat);\n  });\n\n  /*\n   * Select the first latitude and longitude format that is matched.\n   * Ordering:\n   *   1. Degrees, minutes, and seconds,\n   *   2. Degrees, and decimal minutes,\n   *   3. Decimal degrees.\n   */\n  var latLongMatch = latLongMatches.reduce(function (accumulator, value, index) {\n    if (!accumulator && value) {\n      var latLongResult = latLongFormats[index].exec(address);\n      var lat = latLongResult.slice(1, latLongResult.length / 2 + 1);\n      var lng = latLongResult.slice(latLongResult.length / 2 + 1, latLongResult.length);\n\n      return {\n        lat: lat,\n        lng: lng\n      };\n    }\n\n    return accumulator;\n  }, null);\n\n  // If we've got a match on latitude and longitude, use that and avoid geocoding\n  if (latLongMatch) {\n    var latDecimalDegrees = getDecimalDegrees.apply(undefined, toConsumableArray(latLongMatch.lat));\n    var longDecimalDegrees = getDecimalDegrees.apply(undefined, toConsumableArray(latLongMatch.lng));\n\n    deferred.resolve({\n      lat: latDecimalDegrees,\n      lng: longDecimalDegrees\n    });\n  } else {\n    // Otherwise, geocode the assumed address\n    var geocoder = new google.maps.Geocoder();\n\n    geocoder.geocode({ address: address }, function (results, status) {\n      if (status !== google.maps.GeocoderStatus.OK) {\n        deferred.reject(status);\n      }\n\n      deferred.resolve(results[0].geometry.location);\n    });\n  }\n\n  return deferred;\n}\n\nfunction getMapStyles(colors) {\n  if (!colors) {\n    return [];\n  }\n\n  return [{ elementType: 'geometry', stylers: [{ color: colors.e }] }, { elementType: 'labels.icon', stylers: [{ visibility: 'off' }] }, { elementType: 'labels.text.fill', stylers: [{ color: colors.a }] }, { elementType: 'labels.text.stroke', stylers: [{ color: colors.e }] }, { featureType: 'administrative', elementType: 'geometry', stylers: [{ visibility: 'off' }] }, { featureType: 'administrative.country', stylers: [{ visibility: 'off' }] }, { featureType: 'administrative.land_parcel', stylers: [{ visibility: 'off' }] }, { featureType: 'administrative.neighborhood', stylers: [{ visibility: 'off' }] }, { featureType: 'administrative.locality', stylers: [{ visibility: 'off' }] }, { featureType: 'poi', stylers: [{ visibility: 'off' }] }, { featureType: 'road', elementType: 'geometry.fill', stylers: [{ color: colors.d }] }, { featureType: 'road', elementType: 'labels.icon', stylers: [{ visibility: 'off' }] }, { featureType: 'road.arterial', elementType: 'geometry', stylers: [{ color: colors.c }] }, { featureType: 'road.highway', elementType: 'geometry', stylers: [{ color: colors.b }] }, { featureType: 'road.highway.controlled_access', stylers: [{ visibility: 'off' }] }, { featureType: 'road.local', elementType: 'labels.text.fill', stylers: [{ color: colors.b }] }, { featureType: 'road.local', elementType: 'labels.text.stroke', stylers: [{ color: colors.e }] }, { featureType: 'transit', stylers: [{ visibility: 'off' }] }, { featureType: 'water', elementType: 'geometry', stylers: [{ color: colors.f }] }];\n}\n\nfunction createMap(options) {\n  var deferred = $.Deferred();\n  var container = options.container,\n      address = options.address,\n      zoom = options.zoom,\n      colors = options.colors;\n\n\n  getLatitudeLongitude(address).done(function (latLong) {\n    var map = new google.maps.Map(container, {\n      center: latLong,\n      clickableIcons: false,\n      disableDefaultUI: true,\n      disableDoubleClickZoom: true,\n      gestureHandling: 'none',\n      keyboardShortcuts: false,\n      maxZoom: zoom,\n      minZoom: zoom,\n      scrollWheel: false,\n      styles: getMapStyles(colors),\n      zoom: zoom,\n      zoomControl: false\n    });\n\n    new google.maps.Marker({\n      clickable: false,\n      map: map,\n      position: map.getCenter()\n    });\n\n    map.panBy(0, 0);\n    deferred.resolve(map);\n  }).fail(function (status) {\n    var usageLimits = 'https://developers.google.com/maps/faq#usagelimits';\n    var errorMessage = void 0;\n\n    switch (status) {\n      case 'ZERO_RESULTS':\n        errorMessage = '<p>Unable to find the address:</p> ' + address;\n        break;\n      case 'OVER_QUERY_LIMIT':\n        errorMessage = '\\n            <p>Unable to load Google Maps, you have reached your usage limit.</p>\\n            <p>\\n              Please visit\\n              <a href=\"' + usageLimits + '\" target=\"_blank\">' + usageLimits + '</a>\\n              for more details.\\n            </p>\\n          ';\n        break;\n      default:\n        errorMessage = 'Unable to load Google Maps.';\n        break;\n    }\n\n    deferred.reject(errorMessage);\n  });\n\n  return deferred;\n}\n\nfunction displayErrorInThemeEditor(container, errorMessage) {\n  var isThemeEditor = window.Shopify && window.Shopify.designMode;\n\n  if (!isThemeEditor) {\n    return;\n  }\n\n  container.innerHTML = '<div class=\"map-error-message\">' + errorMessage + '</div>';\n}\n\nvar PxsMap = function PxsMap(section) {\n  var _this = this;\n\n  classCallCheck(this, PxsMap);\n\n  this.map = null;\n\n  var el = section.el.querySelector('[data-map]');\n  var container = el.querySelector('[data-map-container]');\n  var settings = section.data;\n  var address = settings.address,\n      colors = settings.colors;\n\n  var apiKey = settings.api_key;\n  // Scale so range is 12 ~ 17, rather than 1 to 6\n  var zoom = Number.isNaN(settings.zoom) ? 13 : 11 + parseInt(settings.zoom, 10);\n\n  if (apiKey) {\n    if (window.googleMaps === undefined) {\n      $script('https://maps.googleapis.com/maps/api/js?key=' + apiKey, function () {\n        window.googleMaps = true;\n        createMap({\n          container: container,\n          address: address,\n          zoom: zoom,\n          colors: colors\n        }).done(function (map) {\n          _this.map = map;\n        }).fail(function (error) {\n          return displayErrorInThemeEditor(container, error);\n        });\n      });\n    } else {\n      createMap({\n        container: container,\n        address: address,\n        zoom: zoom,\n        colors: colors\n      }).done(function (map) {\n        _this.map = map;\n      }).fail(function (error) {\n        return displayErrorInThemeEditor(container, error);\n      });\n    }\n  }\n};\n\nexport default PxsMap;\n"],"sourceRoot":""}